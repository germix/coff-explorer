#include "RelocationsModel.h"

#define MAX_COLUMNS 3

struct REL_TABLE_LOOKUP
{
	uint16_t		Type;
	const char*		Name;
};

#define __T(x) x
#define __TEXT(x) __T(x)

#define DEF_REL_TABLE_LOOKUP(t)			{ t, __TEXT(#t) }
#define DEF_REL_TABLE_LOOKUP_PPC(t)		{ (t&IMAGE_REL_PPC_TYPEMASK), __TEXT(#t) }
#define DEF_REL_TABLE_LOOKUP_SH3(t)		{ (t&0x7FFF), __TEXT(#t) }

//
// I386 relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_I386[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_DIR16),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_REL16),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_DIR32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_DIR32NB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_SEG12),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_SECREL),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_TOKEN),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_SECREL7),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_I386_REL32),
	{ 0, 0 },
};

//
// MIPS relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_MIPS[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_REFHALF),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_REFWORD),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_JMPADDR),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_REFHI),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_REFLO),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_GPREL),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_LITERAL),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_SECREL),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_SECRELLO),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_SECRELHI),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_TOKEN),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_JMPADDR16),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_REFWORDNB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_MIPS_PAIR),
	{ 0, 0 },
};

//
// Alpha relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_ALPHA[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_REFLONG),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_REFQUAD),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_GPREL32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_LITERAL),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_LITUSE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_GPDISP),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_BRADDR),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_HINT),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_INLINE_REFLONG),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_REFHI),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_REFLO),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_PAIR),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_MATCH),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_SECREL),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_REFLONGNB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_SECRELLO),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_SECRELHI),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_REFQ3),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_REFQ2),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_REFQ1),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_GPRELLO),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ALPHA_GPRELHI),
	{ 0, 0 },
};

//
// IBM PowerPC relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_PPC[] =
{
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_ADDR64),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_ADDR32),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_ADDR24),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_ADDR16),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_ADDR14),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_REL24),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_REL14),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_TOCREL16),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_TOCREL14),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_ADDR32NB),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_SECREL),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_SECTION),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_IFGLUE),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_IMGLUE),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_SECREL16),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_REFHI),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_REFLO),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_PAIR),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_SECRELLO),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_SECRELHI),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_GPREL),
	DEF_REL_TABLE_LOOKUP_PPC(IMAGE_REL_PPC_TOKEN),
	{ 0, 0 },
};

//
// Hitachi SH3 relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_SH3[] =
{
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_DIRECT16),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_DIRECT32),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_DIRECT8),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_DIRECT8_WORD),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_DIRECT8_LONG),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_DIRECT4),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_DIRECT4_WORD),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_DIRECT4_LONG),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_PCREL8_WORD),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_PCREL8_LONG),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_PCREL12_WORD),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_STARTOF_SECTION),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_SIZEOF_SECTION),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_SECTION),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_SECREL),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_DIRECT32_NB),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_GPREL4_LONG),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SH3_TOKEN),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SHM_PCRELPT),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SHM_REFLO),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SHM_REFHALF),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SHM_RELLO),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SHM_RELHALF),
	DEF_REL_TABLE_LOOKUP_SH3(IMAGE_REL_SHM_PAIR),
	{ 0, 0 },
};

//
// ARM relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_ARM[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_ADDR32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_ADDR32NB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_BRANCH24),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_BRANCH11),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_TOKEN),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_GPREL12),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_GPREL7),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_BLX24),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_BLX11),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_ARM_SECREL),
	{ 0, 0 },
};

//
//
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_AM[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AM_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AM_ADDR32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AM_ADDR32NB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AM_CALL32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AM_FUNCINFO),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AM_REL32_1),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AM_REL32_2),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AM_SECREL),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AM_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AM_TOKEN),
	{ 0, 0 },
};

//
// x64 relocations
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_AMD64[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_ADDR64),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_ADDR32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_ADDR32NB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_REL32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_REL32_1),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_REL32_2),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_REL32_3),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_REL32_4),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_REL32_5),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_SECREL),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_SECREL7),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_TOKEN),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_SREL32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_PAIR),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_AMD64_SSPAN32),
	{ 0, 0 },
};

//
// IA64 relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_IA64[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_IMM14),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_IMM22),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_IMM64),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_DIR32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_DIR64),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_PCREL21B),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_PCREL21M),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_PCREL21F),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_GPREL22),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_LTOFF22),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_SECREL22),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_SECREL64I),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_SECREL32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_DIR32NB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_SREL14),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_SREL22),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_SREL32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_UREL32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_PCREL60X),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_PCREL60B),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_PCREL60F),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_PCREL60I),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_PCREL60M),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_IMMGPREL64),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_TOKEN),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_GPREL32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_IA64_ADDEND),
	{ 0, 0 },
};

//
// CEF relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_CEF[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEF_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEF_ADDR32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEF_ADDR64),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEF_ADDR32NB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEF_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEF_SECREL),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEF_TOKEN),
	{ 0, 0 },
};

//
// clr relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_CEE[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEE_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEE_ADDR32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEE_ADDR64),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEE_ADDR32NB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEE_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEE_SECREL),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_CEE_TOKEN),
	{ 0, 0 },
};

//
// Mitsubishi M32R little endian relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_M32R[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_ADDR32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_ADDR32NB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_ADDR24),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_GPREL16),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_PCREL24),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_PCREL16),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_PCREL8),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_REFHALF),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_REFHI),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_REFLO),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_PAIR),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_SECREL32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_M32R_TOKEN),
	{ 0, 0 },
};

//
// EFI byte code relocation types.
//
const REL_TABLE_LOOKUP REL_TABLE_LOOKUP_EBC[] =
{
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_EBC_ABSOLUTE),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_EBC_ADDR32NB),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_EBC_REL32),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_EBC_SECTION),
	DEF_REL_TABLE_LOOKUP(IMAGE_REL_EBC_SECREL),
	{ 0, 0 },
};


RelocationsModel::RelocationsModel(QObject* parent)
	: QAbstractItemModel(parent)
	, relocationTypesLookup(nullptr)
{
}

RelocationsModel::~RelocationsModel()
{
}

void RelocationsModel::clear()
{
	beginResetModel();
	relocations.clear();
	relocationTypesLookup = nullptr;
	endResetModel();
}

void RelocationsModel::setRelocation(const QVector<IMAGE_RELOCATION>& rel, uint16_t machine)
{
	beginResetModel();
	relocations = rel;
	switch(machine)
	{
		case IMAGE_FILE_MACHINE_I386:
			relocationTypesLookup = REL_TABLE_LOOKUP_I386;
			break;
		case IMAGE_FILE_MACHINE_R3000:
		case IMAGE_FILE_MACHINE_R4000:
		case IMAGE_FILE_MACHINE_R10000:
		case IMAGE_FILE_MACHINE_WCEMIPSV2:
		case IMAGE_FILE_MACHINE_MIPS16:
		case IMAGE_FILE_MACHINE_MIPSFPU:
		case IMAGE_FILE_MACHINE_MIPSFPU16:
			relocationTypesLookup = REL_TABLE_LOOKUP_MIPS;
			break;
		case IMAGE_FILE_MACHINE_ALPHA:
		case IMAGE_FILE_MACHINE_ALPHA64:
			relocationTypesLookup = REL_TABLE_LOOKUP_ALPHA;
			break;
		case IMAGE_FILE_MACHINE_POWERPC:
		case IMAGE_FILE_MACHINE_POWERPCFP:
			relocationTypesLookup = REL_TABLE_LOOKUP_PPC;
			break;
		case IMAGE_FILE_MACHINE_SH3:
		case IMAGE_FILE_MACHINE_SH3DSP:
		case IMAGE_FILE_MACHINE_SH3E:
		case IMAGE_FILE_MACHINE_SH4:
		case IMAGE_FILE_MACHINE_SH5:
			relocationTypesLookup = REL_TABLE_LOOKUP_SH3;
			break;
		case IMAGE_FILE_MACHINE_ARM:
			relocationTypesLookup = REL_TABLE_LOOKUP_ARM;
			break;
		case IMAGE_FILE_MACHINE_AMD64:
			relocationTypesLookup = REL_TABLE_LOOKUP_AMD64;
			break;
		case IMAGE_FILE_MACHINE_IA64:
			relocationTypesLookup = REL_TABLE_LOOKUP_IA64;
			break;
		case IMAGE_FILE_MACHINE_CEF:
			relocationTypesLookup = REL_TABLE_LOOKUP_CEF;
			break;
		case IMAGE_FILE_MACHINE_CEE:
			relocationTypesLookup = REL_TABLE_LOOKUP_CEE;
			break;
		case IMAGE_FILE_MACHINE_M32R:
			relocationTypesLookup = REL_TABLE_LOOKUP_M32R;
			break;
		case IMAGE_FILE_MACHINE_EBC:
			relocationTypesLookup = REL_TABLE_LOOKUP_EBC;
			break;
		case IMAGE_FILE_MACHINE_THUMB:	// ??
		case IMAGE_FILE_MACHINE_AM33:	// ??
		default:
			relocationTypesLookup = nullptr;
			break;
	}
	endResetModel();
}

QVariant RelocationsModel::headerData(int section, Qt::Orientation orientation, int role) const
{
	if(role != Qt::DisplayRole)
		return QVariant();

	if(orientation == Qt::Horizontal)
	{
		switch(section)
		{
			case 0: return "VirtualAddress/RelocCount";
			case 1: return "SymbolTableIndex";
			case 2: return "Type";
		}
	}
	return QVariant();
}

QModelIndex RelocationsModel::index(int row, int column, const QModelIndex& parent) const
{
	Q_UNUSED(parent);
	if(row < 0)
		return QModelIndex();

	if((row >= 0 && row < relocations.size()) && (column >= 0 && column < MAX_COLUMNS))
	{
		return createIndex(row, column);
	}
	return QModelIndex();
}

QModelIndex RelocationsModel::parent(const QModelIndex& child) const
{
	Q_UNUSED(child);
	return QModelIndex();
}

int RelocationsModel::rowCount(const QModelIndex& parent) const
{
	Q_UNUSED(parent);
	if(!parent.isValid())
		return relocations.count();
	return 0;
}

int RelocationsModel::columnCount(const QModelIndex& parent) const
{
	Q_UNUSED(parent);
	return MAX_COLUMNS;
}

QVariant RelocationsModel::data(const QModelIndex& index, int role) const
{
	if(role == Qt::DisplayRole)
	{
		const IMAGE_RELOCATION& rel = relocations[index.row()];

		switch(index.column())
		{
			case 0:
				return QString().sprintf("%d", rel.VirtualAddress);
			case 1:
				return QString().sprintf("%d", rel.SymbolTableIndex);
			case 2:
				if(relocationTypesLookup)
				{
					for(const REL_TABLE_LOOKUP* p = relocationTypesLookup; p->Name != nullptr; p++)
					{
						if(p->Type == rel.Type)
							return p->Name;
					}
				}
				return "?";
		}
	}
	return QVariant();
}
